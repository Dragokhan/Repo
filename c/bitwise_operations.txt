#include <stdio.h>
#include <time.h>
#include <stdlib.h>

#define byte 8

void delay(int number_of_seconds);

void decimal_to_binary(int decimal, char binary[byte + 1]);

void and_operation(char binary[byte - 1], char binary0[byte - 1], char binary_ret[byte - 1]);
void or_operation(char binary[byte - 1], char binary0[byte - 1], char binary_ret[byte - 1]);
void xor_operation(char binary[byte - 1], char binary0[byte - 1], char binary_ret[byte - 1]);
void tilde_operation(char binary[byte - 1], char binary_ret[byte - 1]);
void lshift_operation(char binary[byte - 1], char binary_ret[byte - 1], int shift_num);
void rshift_operation(char binary[byte - 1], char binary_ret[byte - 1], int shift_num);

int main(void)
{
    char binary[byte + 1] = "00000000";
    char binary0[byte + 1] = "00000000";
    char binary_ret[byte + 1] = "00000000";

    int ans;
    printf("& = 0, | = 1, ^ = 2, ~ = 3, << = 4, >> = 5\n"); // & = 0, | = 1, ^ = 2, ~ = 3, << = 4, >> = 5
    printf("???: ");
    scanf("%d", &ans);

    system("cls");

    int ans2, ans3;
    switch(ans) {
    case 0:
        printf("AND:\n");
        printf("Number 1: ");
        scanf("%d", &ans2);
        printf("Number 2: ");
        scanf("%d", &ans3);

        system("cls");

        decimal_to_binary(ans2, binary);
        decimal_to_binary(ans3, binary0);

        and_operation(binary, binary0, binary_ret);

        printf("AND:\n");
        printf("Number 1: %s\n", binary);
        printf("Number 2: %s\n", binary0);
        printf("Result: %s", binary_ret);
        break;

    case 1:
        printf("OR:\n");
        printf("Number 1: ");
        scanf("%d", &ans2);
        printf("Number 2: ");
        scanf("%d", &ans3);

        system("cls");

        decimal_to_binary(ans2, binary);
        decimal_to_binary(ans3, binary0);

        or_operation(binary, binary0, binary_ret);

        printf("OR:\n");
        printf("Number 1: %s\n", binary);
        printf("Number 2: %s\n", binary0);
        printf("Result: %s", binary_ret);
        break;

    case 2:
        printf("XOR:\n");
        printf("Number 1: ");
        scanf("%d", &ans2);
        printf("Number 2: ");
        scanf("%d", &ans3);

        system("cls");

        decimal_to_binary(ans2, binary);
        decimal_to_binary(ans3, binary0);

        xor_operation(binary, binary0, binary_ret);

        printf("XOR:\n");
        printf("Number 1: %s\n", binary);
        printf("Number 2: %s\n", binary0);
        printf("Result: %s", binary_ret);
        break;

    case 3:
        printf("TILDE:\n");
        printf("Number: ");
        scanf("%d", &ans2);

        system("cls");

        decimal_to_binary(ans2, binary);

        tilde_operation(binary, binary_ret);

        printf("TILDE:\n");
        printf("Number: %s\n", binary);
        printf("Result: %s", binary_ret);
        break;

    case 4:
        printf("LEFT SHIFT:\n");
        printf("Number: ");
        scanf("%d", &ans2);
        printf("Step: ");
        scanf("%d", &ans3);

        system("cls");

        decimal_to_binary(ans2, binary);

        lshift_operation(binary, binary_ret, ans3);

        printf("LEFT SHIFT:\n");
        printf("Number: %s\n", binary);
        printf("Result: %s", binary_ret);
        break;
    case 5:
        printf("RIGHT SHIFT:\n");
        printf("Number: ");
        scanf("%d", &ans2);
        printf("Step: ");
        scanf("%d", &ans3);

        system("cls");

        decimal_to_binary(ans2, binary);

        rshift_operation(binary, binary_ret, ans3);

        printf("RIGHT SHIFT:\n");
        printf("Number: %s\n", binary);
        printf("Result: %s", binary_ret);
        break;
    }
}

void decimal_to_binary(int decimal, char binary[byte + 1]) { //0 - 255
    while(decimal != 0) {
        int tor = 1;
        int rot = 0;
        while(tor *2 <= decimal) {
            tor *= 2;
            ++rot;
        }
        decimal -= tor;
        binary[byte - 1 - rot] = '1';
    }
}

void and_operation(char binary[byte - 1], char binary0[byte - 1], char binary_ret[byte - 1]) {
    for(int i = 0; i < byte; ++i) {
        if(binary[i] == '1' && binary0[i] == '1') {
            binary_ret[i] = '1';
        }
        else {
            binary_ret[i] = '0';
        }
    }
}

void or_operation(char binary[byte - 1], char binary0[byte - 1], char binary_ret[byte - 1]) {
    for(int i = 0; i < byte; ++i) {
        if(binary[i] == '0' && binary0[i] == '0') {
            binary_ret[i] = '0';
        }
        else {
            binary_ret[i] = '1';
        }
    }
}

void xor_operation(char binary[byte - 1], char binary0[byte - 1], char binary_ret[byte - 1]) {
    for(int i = 0; i < byte; ++i) {
        if(binary[i] != binary0[i]) {
            binary_ret[i] = '1';
        }
        else {
            binary_ret[i] = '0';
        }
    }
}

void tilde_operation(char binary[byte - 1], char binary_ret[byte - 1]) {
    for(int i = 0; i < byte; ++i) {
        if(binary[i] == '0') {
            binary_ret[i] = '1';
        }
        else {
            binary_ret[i] = '0';
        }
    }
}

void lshift_operation(char binary[byte - 1], char binary_ret[byte - 1], int shift_num) {
    for(int i = shift_num; i < byte; ++i) {
        if(i - 2 >= 0) {
            binary_ret[i - shift_num] = binary[i];
        }
    }

    for(int i = 0; i < shift_num; ++i) {
        binary_ret[byte - 1 - i] = '0';
    }
}

void rshift_operation(char binary[byte - 1], char binary_ret[byte - 1], int shift_num) {
    for(int i = byte - shift_num; i >= 0; --i) {
        if(i + shift_num < byte) {
            binary_ret[i + shift_num] = binary[i];
        }
    }

    for(int i = 0; i < shift_num; ++i) {
        binary_ret[i] = '0';
    }
}